
/* Note that the default MagicaVoxel format is AA GG BB RR, so something will
 * have to be done if we continue to load this format.  I manually rearranged
 * the columns in this lookup table to match what OpenGL expects: RR GG BB AA
 */

//  RR GG BB AA
static v4 default_palette[PALETTE_SIZE] = {
  V4(0x00, 0x00, 0x00, 0x00),
  V4(0xff, 0xff, 0xff, 0xff),
  V4(0xff, 0xff, 0xcc, 0xff),
  V4(0xff, 0xff, 0x99, 0xff),
  V4(0xff, 0xff, 0x66, 0xff),
  V4(0xff, 0xff, 0x33, 0xff),
  V4(0xff, 0xff, 0x00, 0xff),
  V4(0xff, 0xcc, 0xff, 0xff),
  V4(0xff, 0xcc, 0xcc, 0xff),
  V4(0xff, 0xcc, 0x99, 0xff),
  V4(0xff, 0xcc, 0x66, 0xff),
  V4(0xff, 0xcc, 0x33, 0xff),
  V4(0xff, 0xcc, 0x00, 0xff),
  V4(0xff, 0x99, 0xff, 0xff),
  V4(0xff, 0x99, 0xcc, 0xff),
  V4(0xff, 0x99, 0x99, 0xff),
  V4(0xff, 0x99, 0x66, 0xff),
  V4(0xff, 0x99, 0x33, 0xff),
  V4(0xff, 0x99, 0x00, 0xff),
  V4(0xff, 0x66, 0xff, 0xff),
  V4(0xff, 0x66, 0xcc, 0xff),
  V4(0xff, 0x66, 0x99, 0xff),
  V4(0xff, 0x66, 0x66, 0xff),
  V4(0xff, 0x66, 0x33, 0xff),
  V4(0xff, 0x66, 0x00, 0xff),
  V4(0xff, 0x33, 0xff, 0xff),
  V4(0xff, 0x33, 0xcc, 0xff),
  V4(0xff, 0x33, 0x99, 0xff),
  V4(0xff, 0x33, 0x66, 0xff),
  V4(0xff, 0x33, 0x33, 0xff),
  V4(0xff, 0x33, 0x00, 0xff),
  V4(0xff, 0x00, 0xff, 0xff),
  V4(0xff, 0x00, 0xcc, 0xff),
  V4(0xff, 0x00, 0x99, 0xff),
  V4(0xff, 0x00, 0x66, 0xff),
  V4(0xff, 0x00, 0x33, 0xff),
  V4(0xff, 0x00, 0x00, 0xff),
  V4(0xcc, 0xff, 0xff, 0xff),
  V4(0xcc, 0xff, 0xcc, 0xff),
  V4(0xcc, 0xff, 0x99, 0xff),
  V4(0xcc, 0xff, 0x66, 0xff),
  V4(0xcc, 0xff, 0x33, 0xff),
  V4(0xcc, 0xff, 0x00, 0xff),
  V4(0xcc, 0xcc, 0xff, 0xff),
  V4(0xcc, 0xcc, 0xcc, 0xff),
  V4(0xcc, 0xcc, 0x99, 0xff),
  V4(0xcc, 0xcc, 0x66, 0xff),
  V4(0xcc, 0xcc, 0x33, 0xff),
  V4(0xcc, 0xcc, 0x00, 0xff),
  V4(0xcc, 0x99, 0xff, 0xff),
  V4(0xcc, 0x99, 0xcc, 0xff),
  V4(0xcc, 0x99, 0x99, 0xff),
  V4(0xcc, 0x99, 0x66, 0xff),
  V4(0xcc, 0x99, 0x33, 0xff),
  V4(0xcc, 0x99, 0x00, 0xff),
  V4(0xcc, 0x66, 0xff, 0xff),
  V4(0xcc, 0x66, 0xcc, 0xff),
  V4(0xcc, 0x66, 0x99, 0xff),
  V4(0xcc, 0x66, 0x66, 0xff),
  V4(0xcc, 0x66, 0x33, 0xff),
  V4(0xcc, 0x66, 0x00, 0xff),
  V4(0xcc, 0x33, 0xff, 0xff),
  V4(0xcc, 0x33, 0xcc, 0xff),
  V4(0xcc, 0x33, 0x99, 0xff),
  V4(0xcc, 0x33, 0x66, 0xff),
  V4(0xcc, 0x33, 0x33, 0xff),
  V4(0xcc, 0x33, 0x00, 0xff),
  V4(0xcc, 0x00, 0xff, 0xff),
  V4(0xcc, 0x00, 0xcc, 0xff),
  V4(0xcc, 0x00, 0x99, 0xff),
  V4(0xcc, 0x00, 0x66, 0xff),
  V4(0xcc, 0x00, 0x33, 0xff),
  V4(0xcc, 0x00, 0x00, 0xff),
  V4(0x99, 0xff, 0xff, 0xff),
  V4(0x99, 0xff, 0xcc, 0xff),
  V4(0x99, 0xff, 0x99, 0xff),
  V4(0x99, 0xff, 0x66, 0xff),
  V4(0x99, 0xff, 0x33, 0xff),
  V4(0x99, 0xff, 0x00, 0xff),
  V4(0x99, 0xcc, 0xff, 0xff),
  V4(0x99, 0xcc, 0xcc, 0xff),
  V4(0x99, 0xcc, 0x99, 0xff),
  V4(0x99, 0xcc, 0x66, 0xff),
  V4(0x99, 0xcc, 0x33, 0xff),
  V4(0x99, 0xcc, 0x00, 0xff),
  V4(0x99, 0x99, 0xff, 0xff),
  V4(0x99, 0x99, 0xcc, 0xff),
  V4(0x99, 0x99, 0x99, 0xff),
  V4(0x99, 0x99, 0x66, 0xff),
  V4(0x99, 0x99, 0x33, 0xff),
  V4(0x99, 0x99, 0x00, 0xff),
  V4(0x99, 0x66, 0xff, 0xff),
  V4(0x99, 0x66, 0xcc, 0xff),
  V4(0x99, 0x66, 0x99, 0xff),
  V4(0x99, 0x66, 0x66, 0xff),
  V4(0x99, 0x66, 0x33, 0xff),
  V4(0x99, 0x66, 0x00, 0xff),
  V4(0x99, 0x33, 0xff, 0xff),
  V4(0x99, 0x33, 0xcc, 0xff),
  V4(0x99, 0x33, 0x99, 0xff),
  V4(0x99, 0x33, 0x66, 0xff),
  V4(0x99, 0x33, 0x33, 0xff),
  V4(0x99, 0x33, 0x00, 0xff),
  V4(0x99, 0x00, 0xff, 0xff),
  V4(0x99, 0x00, 0xcc, 0xff),
  V4(0x99, 0x00, 0x99, 0xff),
  V4(0x99, 0x00, 0x66, 0xff),
  V4(0x99, 0x00, 0x33, 0xff),
  V4(0x99, 0x00, 0x00, 0xff),
  V4(0x66, 0xff, 0xff, 0xff),
  V4(0x66, 0xff, 0xcc, 0xff),
  V4(0x66, 0xff, 0x99, 0xff),
  V4(0x66, 0xff, 0x66, 0xff),
  V4(0x66, 0xff, 0x33, 0xff),
  V4(0x66, 0xff, 0x00, 0xff),
  V4(0x66, 0xcc, 0xff, 0xff),
  V4(0x66, 0xcc, 0xcc, 0xff),
  V4(0x66, 0xcc, 0x99, 0xff),
  V4(0x66, 0xcc, 0x66, 0xff),
  V4(0x66, 0xcc, 0x33, 0xff),
  V4(0x66, 0xcc, 0x00, 0xff),
  V4(0x66, 0x99, 0xff, 0xff),
  V4(0x66, 0x99, 0xcc, 0xff),
  V4(0x66, 0x99, 0x99, 0xff),
  V4(0x66, 0x99, 0x66, 0xff),
  V4(0x66, 0x99, 0x33, 0xff),
  V4(0x66, 0x99, 0x00, 0xff),
  V4(0x66, 0x66, 0xff, 0xff),
  V4(0x66, 0x66, 0xcc, 0xff),
  V4(0x66, 0x66, 0x99, 0xff),
  V4(0x66, 0x66, 0x66, 0xff),
  V4(0x66, 0x66, 0x33, 0xff),
  V4(0x66, 0x66, 0x00, 0xff),
  V4(0x66, 0x33, 0xff, 0xff),
  V4(0x66, 0x33, 0xcc, 0xff),
  V4(0x66, 0x33, 0x99, 0xff),
  V4(0x66, 0x33, 0x66, 0xff),
  V4(0x66, 0x33, 0x33, 0xff),
  V4(0x66, 0x33, 0x00, 0xff),
  V4(0x66, 0x00, 0xff, 0xff),
  V4(0x66, 0x00, 0xcc, 0xff),
  V4(0x66, 0x00, 0x99, 0xff),
  V4(0x66, 0x00, 0x66, 0xff),
  V4(0x66, 0x00, 0x33, 0xff),
  V4(0x66, 0x00, 0x00, 0xff),
  V4(0x33, 0xff, 0xff, 0xff),
  V4(0x33, 0xff, 0xcc, 0xff),
  V4(0x33, 0xff, 0x99, 0xff),
  V4(0x33, 0xff, 0x66, 0xff),
  V4(0x33, 0xff, 0x33, 0xff),
  V4(0x33, 0xff, 0x00, 0xff),
  V4(0x33, 0xcc, 0xff, 0xff),
  V4(0x33, 0xcc, 0xcc, 0xff),
  V4(0x33, 0xcc, 0x99, 0xff),
  V4(0x33, 0xcc, 0x66, 0xff),
  V4(0x33, 0xcc, 0x33, 0xff),
  V4(0x33, 0xcc, 0x00, 0xff),
  V4(0x33, 0x99, 0xff, 0xff),
  V4(0x33, 0x99, 0xcc, 0xff),
  V4(0x33, 0x99, 0x99, 0xff),
  V4(0x33, 0x99, 0x66, 0xff),
  V4(0x33, 0x99, 0x33, 0xff),
  V4(0x33, 0x99, 0x00, 0xff),
  V4(0x33, 0x66, 0xff, 0xff),
  V4(0x33, 0x66, 0xcc, 0xff),
  V4(0x33, 0x66, 0x99, 0xff),
  V4(0x33, 0x66, 0x66, 0xff),
  V4(0x33, 0x66, 0x33, 0xff),
  V4(0x33, 0x66, 0x00, 0xff),
  V4(0x33, 0x33, 0xff, 0xff),
  V4(0x33, 0x33, 0xcc, 0xff),
  V4(0x33, 0x33, 0x99, 0xff),
  V4(0x33, 0x33, 0x66, 0xff),
  V4(0x33, 0x33, 0x33, 0xff),
  V4(0x33, 0x33, 0x00, 0xff),
  V4(0x33, 0x00, 0xff, 0xff),
  V4(0x33, 0x00, 0xcc, 0xff),
  V4(0x33, 0x00, 0x99, 0xff),
  V4(0x33, 0x00, 0x66, 0xff),
  V4(0x33, 0x00, 0x33, 0xff),
  V4(0x33, 0x00, 0x00, 0xff),
  V4(0x00, 0xff, 0xff, 0xff),
  V4(0x00, 0xff, 0xcc, 0xff),
  V4(0x00, 0xff, 0x99, 0xff),
  V4(0x00, 0xff, 0x66, 0xff),
  V4(0x00, 0xff, 0x33, 0xff),
  V4(0x00, 0xff, 0x00, 0xff),
  V4(0x00, 0xcc, 0xff, 0xff),
  V4(0x00, 0xcc, 0xcc, 0xff),
  V4(0x00, 0xcc, 0x99, 0xff),
  V4(0x00, 0xcc, 0x66, 0xff),
  V4(0x00, 0xcc, 0x33, 0xff),
  V4(0x00, 0xcc, 0x00, 0xff),
  V4(0x00, 0x99, 0xff, 0xff),
  V4(0x00, 0x99, 0xcc, 0xff),
  V4(0x00, 0x99, 0x99, 0xff),
  V4(0x00, 0x99, 0x66, 0xff),
  V4(0x00, 0x99, 0x33, 0xff),
  V4(0x00, 0x99, 0x00, 0xff),
  V4(0x00, 0x66, 0xff, 0xff),
  V4(0x00, 0x66, 0xcc, 0xff),
  V4(0x00, 0x66, 0x99, 0xff),
  V4(0x00, 0x66, 0x66, 0xff),
  V4(0x00, 0x66, 0x33, 0xff),
  V4(0x00, 0x66, 0x00, 0xff),
  V4(0x00, 0x33, 0xff, 0xff),
  V4(0x00, 0x33, 0xcc, 0xff),
  V4(0x00, 0x33, 0x99, 0xff),
  V4(0x00, 0x33, 0x66, 0xff),
  V4(0x00, 0x33, 0x33, 0xff),
  V4(0x00, 0x33, 0x00, 0xff),
  V4(0x00, 0x00, 0xff, 0xff),
  V4(0x00, 0x00, 0xcc, 0xff),
  V4(0x00, 0x00, 0x99, 0xff),
  V4(0x00, 0x00, 0x66, 0xff),
  V4(0x00, 0x00, 0x33, 0xff),
  V4(0xee, 0x00, 0x00, 0xff),
  V4(0xdd, 0x00, 0x00, 0xff),
  V4(0xbb, 0x00, 0x00, 0xff),
  V4(0xaa, 0x00, 0x00, 0xff),
  V4(0x88, 0x00, 0x00, 0xff),
  V4(0x77, 0x00, 0x00, 0xff),
  V4(0x55, 0x00, 0x00, 0xff),
  V4(0x44, 0x00, 0x00, 0xff),
  V4(0x22, 0x00, 0x00, 0xff),
  V4(0x11, 0x00, 0x00, 0xff),
  V4(0x00, 0xee, 0x00, 0xff),
  V4(0x00, 0xdd, 0x00, 0xff),
  V4(0x00, 0xbb, 0x00, 0xff),
  V4(0x00, 0xaa, 0x00, 0xff),
  V4(0x00, 0x88, 0x00, 0xff),
  V4(0x00, 0x77, 0x00, 0xff),
  V4(0x00, 0x55, 0x00, 0xff),
  V4(0x00, 0x44, 0x00, 0xff),
  V4(0x00, 0x22, 0x00, 0xff),
  V4(0x00, 0x11, 0x00, 0xff),
  V4(0x00, 0x00, 0xee, 0xff),
  V4(0x00, 0x00, 0xdd, 0xff),
  V4(0x00, 0x00, 0xbb, 0xff),
  V4(0x00, 0x00, 0xaa, 0xff),
  V4(0x00, 0x00, 0x88, 0xff),
  V4(0x00, 0x00, 0x77, 0xff),
  V4(0x00, 0x00, 0x55, 0xff),
  V4(0x00, 0x00, 0x44, 0xff),
  V4(0x00, 0x00, 0x22, 0xff),
  V4(0x00, 0x00, 0x11, 0xff),
  V4(0xee, 0xee, 0xee, 0xff),
  V4(0xdd, 0xdd, 0xdd, 0xff),
  V4(0xbb, 0xbb, 0xbb, 0xff),
  V4(0xaa, 0xaa, 0xaa, 0xff),
  V4(0x88, 0x88, 0x88, 0xff),
  V4(0x77, 0x77, 0x77, 0xff),
  V4(0x55, 0x55, 0x55, 0xff),
  V4(0x44, 0x44, 0x44, 0xff),
  V4(0x22, 0x22, 0x22, 0xff),
  V4(0x11, 0x11, 0x11, 0xff)
};

void
GetColorData( int colorIndex, float *Colors)
{
  assert(colorIndex < PALETTE_SIZE);

  v4 Color = default_palette[colorIndex];

  for (int i = 0; i < FACE_COLOR_SIZE-2; i+=3)
  {
    *(Colors + i + 0) = (Color.r/256);
    *(Colors + i + 1) = (Color.g/256);
    *(Colors + i + 2) = (Color.b/256);
  }

  return;
}

