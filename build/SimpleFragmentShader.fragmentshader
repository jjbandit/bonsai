#version 330 core

in vec3 vertexP_worldspace;
in vec3 vertexN_worldspace;
in vec3 LightDirection_worldspace;
in vec3 MaterialColor;

in vec4 ShadowCoord;

out vec3 color;

uniform vec3 GlobalLight_cameraspace;
uniform mat4 MVP;
uniform sampler2DShadow shadowMap;
uniform vec3 LightP_worldspace;

float GlobalIntensity = 5.0f;
float Intensity = 600.0f;

vec2 poissonDisk[16] = vec2[](
   vec2( -0.94201624,   -0.39906216 ),
   vec2(  0.94558609,   -0.76890725 ),
   vec2( -0.09418410,   -0.92938870 ),
   vec2(  0.34495938,    0.29387760 ),
   vec2( -0.91588581,    0.45771432 ),
   vec2( -0.81544232,   -0.87912464 ),
   vec2( -0.38277543,    0.27676845 ),
   vec2(  0.97484398,    0.75648379 ),
   vec2(  0.44323325,   -0.97511554 ),
   vec2(  0.53742981,   -0.47373420 ),
   vec2( -0.26496911,   -0.41893023 ),
   vec2(  0.79197514,    0.19090188 ),
   vec2( -0.24188840,    0.99706507 ),
   vec2( -0.81409955,    0.91437590 ),
   vec2(  0.19984126,    0.78641367 ),
   vec2(  0.14383161,   -0.14100790 )
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main()
{
  float distance = length( LightP_worldspace - vertexP_worldspace);

  vec3 N = normalize( vertexN_worldspace );
  vec3 L = normalize( LightDirection_worldspace );

  float cosGlobalTheta = clamp( dot( N, GlobalLight_cameraspace), 0, 1);

  // TODO(Jesse): This is an epsilon to fix shadow acne.. can we do this better?
  // I notice a lot of peter-panning on corners using this technique
  float bias = clamp(0.005*tan(acos(cosGlobalTheta)), 0, 0.025);

  /* vec3 AmbientColor = MaterialColor * vec3(0.30f); */

  vec3 AmbientColor = MaterialColor * (GlobalIntensity/10.0f);

  float cosDirectionalTheta =  clamp( dot( N, L ), 0, 1);

  float visibility = 1;

  for (int i=0;i<4;i++){
    int index = int(16.0*random(floor(vertexP_worldspace.xyz*1000.0), i))%16;
    visibility -= 0.2*( 1.0 - texture( shadowMap, vec3(ShadowCoord.xy + poissonDisk[index]/1000.0,  (ShadowCoord.z-bias)/ShadowCoord.w) ));
  }

  color =
      AmbientColor
      /* + ( visibility * AmbientColor * cosGlobalTheta) */
      + ( MaterialColor * Intensity * cosDirectionalTheta / (distance*distance) )
      ;

}
